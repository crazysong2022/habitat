# projects/shiwa_farm/main.py
import streamlit as st
import os
from urllib.parse import urlparse
import psycopg2
from datetime import datetime, time
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from dotenv import load_dotenv
# ================== ‚ë† AI ÈóÆÁ≠îÊñ∞Â¢û‰æùËµñ ==================
import json, tempfile, pandas as pd
from datetime import datetime
from openai import OpenAI
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.exc import SQLAlchemyError
# =======================================================

# -----------------------------
# Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
# -----------------------------
load_dotenv()

DATABASE_URL = os.getenv("DATABASE_SHIWA_URL")
if not DATABASE_URL:
    st.error("‚ùå DATABASE_SHIWA_URL Êú™Âú® .env ‰∏≠ËÆæÁΩÆÔºÅ")
    st.stop()

# Ëß£ÊûêÊï∞ÊçÆÂ∫ì URL
try:
    url = urlparse(DATABASE_URL)
    DB_CONFIG = {
        "host": url.hostname,
        "port": url.port or 5432,
        "database": url.path[1:],
        "user": url.username,
        "password": url.password,
    }
except Exception as e:
    st.error(f"‚ùå Êï∞ÊçÆÂ∫ì URL Ëß£ÊûêÂ§±Ë¥•: {e}")
    st.stop()


# -----------------------------
# Êï∞ÊçÆÂ∫ìÂ∑•ÂÖ∑ÂáΩÊï∞
# -----------------------------
def get_db_connection():
    return psycopg2.connect(**DB_CONFIG)


def table_exists(cursor, table_name):
    cursor.execute("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = %s
        );
    """, (table_name,))
    return cursor.fetchone()[0]

TRANSFER_PATH_RULES = {
    "ÁßçËõôÊ±†": ["ÂïÜÂìÅËõôÊ±†","‰∏âÂπ¥ËõôÊ±†", "ÂõõÂπ¥ËõôÊ±†", "‰∫îÂπ¥ËõôÊ±†", "ÂÖ≠Âπ¥ËõôÊ±†", "ËØïÈ™åÊ±†"],
    "Â≠µÂåñÊ±†": ["ÂÖªÊÆñÊ±†", "ËØïÈ™åÊ±†"],
    "ÂÖªÊÆñÊ±†": ["ÂïÜÂìÅËõôÊ±†", "ÁßçËõôÊ±†", "ËØïÈ™åÊ±†"],
    "ÂïÜÂìÅËõôÊ±†": ["‰∏âÂπ¥ËõôÊ±†", "ÂõõÂπ¥ËõôÊ±†", "‰∫îÂπ¥ËõôÊ±†", "ÂÖ≠Âπ¥ËõôÊ±†", "ËØïÈ™åÊ±†"],
    # ËØïÈ™åÊ±†„ÄÅÈîÄÂîÆÂë®ËΩ¨Ê±†‰∏çÂÖÅËÆ∏ËΩ¨Âá∫Ôºà‰∏çÂú® keys ‰∏≠Ôºâ
}
# ============== Â∏∏Áî®Â§áÊ≥®Áü≠ËØ≠Â≠óÂÖ∏ ==============
COMMON_REMARKS = {
    "ÂñÇÂÖªÂ§áÊ≥®": [
        "",
        "Ê≠£Â∏∏ÊäïÂñÇ",
        "Âä†ÈáèÊäïÂñÇ",
        "ÂáèÈáèÊäïÂñÇ",
        "ËõôÁæ§Ê¥ªË∑É",
        "ËõôÁæ§È£üÊ¨≤‰∏ÄËà¨",
        "Ââ©ÊñôËæÉÂ§ö",
        "‰ªäÊó•Êç¢Ê∞¥",
        "Ê∞¥Ê∏©ÂÅèÈ´òÔºåÂáèÊñô",
        "Ê∞¥Ê∏©ÂÅè‰ΩéÔºåÂä†Êñô",
        "‰∏ãÈõ®Âª∂ËøüÊäïÂñÇ"
    ],
    "ÊØèÊó•ËßÇÂØü": [
        "",
        "ËõôÁæ§Ê¥ªË∑ÉÔºåÊëÑÈ£üÊ≠£Â∏∏",
        "ÂèëÁé∞‰∏™Âà´ÊµÆÂ§¥",
        "Ê∞¥Èù¢ÊúâÊ≥°Ê≤´",
        "Ê±†Â∫ïÁ≤™‰æøËæÉÂ§ö",
        "ËùåËö™ÈõÜÁæ§Ê≠£Â∏∏",
        "ÂçµÂùóÂ¢ûÂä†",
        "ÂèëÁé∞ÊúâÊ≠ª‰∫°‰∏™‰Ωì",
        "Ê¥ªÂä®Âäõ‰∏ãÈôç",
        "ÁöÆËÇ§È¢úËâ≤Ê≠£Â∏∏",
        "Êç¢Ê∞¥ÂêéÊ¥ªË∑É"
    ],
    "Êìç‰ΩúÊèèËø∞": [
        "",
        "Êó•Â∏∏ËΩ¨Ê±†",
        "ÂØÜÂ∫¶Ë∞ÉÊï¥",
        "Â§ßÂ∞èÂàÜÁ∫ß",
        "Â§ñË¥≠Êñ∞Ëãó",
        "Ëá™ÁπÅÂ≠µÂåñ",
        "ÁóÖÂÆ≥ÈöîÁ¶ª",
        "ÈîÄÂîÆÂ§áË¥ß",
        "ÂÆûÈ™åËßÇÂØü",
        "Ê∏ÖÊ±†Ê∂àÊØí",
        "Êö¥Èõ®ÂêéÂ∫îÊÄ•ËΩ¨Áßª"
    ]
}
# ==========================================
# -----------------------------
# ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìÔºàÂπÇÁ≠âÔºâ
# -----------------------------
def initialize_database():
    conn = psycopg2.connect(**DB_CONFIG)
    conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
    cur = conn.cursor()

    try:
        # 1. frog_type_shiwa
        if not table_exists(cur, 'frog_type_shiwa'):
            cur.execute("""
                CREATE TABLE frog_type_shiwa (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(20) NOT NULL UNIQUE CHECK (name IN ('ÁªÜÁöÆËõô', 'Á≤óÁöÆËõô'))
                );
                INSERT INTO frog_type_shiwa (name) VALUES ('ÁªÜÁöÆËõô'), ('Á≤óÁöÆËõô');
            """)
            st.toast("‚úÖ ÂàõÂª∫ËõôÁßçÁ±ªË°®", icon="üê∏")

        # 2. pond_type_shiwa
        if not table_exists(cur, 'pond_type_shiwa'):
            cur.execute("""
                CREATE TABLE pond_type_shiwa (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(50) NOT NULL UNIQUE,
                    description TEXT
                );
            """)
            st.toast("‚úÖ ÂàõÂª∫Ê±†Â°òÁ±ªÂûãË°®", icon="üèûÔ∏è")

        for name, desc in [
            ('ÁßçËõôÊ±†', 'Áî®‰∫éÁπÅÊÆñÁöÑÊàêÂπ¥ÁßçËõô'),
            ('Â≠µÂåñÊ±†', 'Áî®‰∫éÂ≠µÂåñÂçµÊàñÂ§ñË¥≠ËùåËö™'),
            ('ÂÖªÊÆñÊ±†', 'ÂπºËõôÁîüÈïøÈò∂ÊÆµ'),
            ('ÂïÜÂìÅËõôÊ±†', 'ÂáÜÂ§áÈîÄÂîÆÁöÑÂïÜÂìÅÊàêËõô'),
            ('‰∏âÂπ¥ËõôÊ±†', '3Âπ¥ÁîüÈîÄÂîÆÂë®ËΩ¨Ê±†'),
            ('ÂõõÂπ¥ËõôÊ±†', '4Âπ¥ÁîüÈîÄÂîÆÂë®ËΩ¨Ê±†'),
            ('‰∫îÂπ¥ËõôÊ±†', '5Âπ¥ÁîüÈîÄÂîÆÂë®ËΩ¨Ê±†'),
            ('ÂÖ≠Âπ¥ËõôÊ±†', '6Âπ¥ÁîüÈîÄÂîÆÂë®ËΩ¨Ê±†'),
            ('ËØïÈ™åÊ±†', 'Áî®‰∫éÂÆûÈ™åÊàñËßÇÂØüÁöÑÁâπÊÆäÊ±†'),
        ]:
            cur.execute(
                """INSERT INTO pond_type_shiwa (name, description)
                VALUES (%s, %s)
                ON CONFLICT (name) DO NOTHING;""",
                (name, desc)
            )

        # 3. pond_shiwa
        if not table_exists(cur, 'pond_shiwa'):
            cur.execute("""
                CREATE TABLE pond_shiwa (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    pond_type_id INT NOT NULL REFERENCES pond_type_shiwa(id) ON DELETE RESTRICT,
                    frog_type_id INT NOT NULL REFERENCES frog_type_shiwa(id) ON DELETE RESTRICT,
                    max_capacity INT NOT NULL DEFAULT 1000 CHECK (max_capacity > 0),
                    current_count INT NOT NULL DEFAULT 0 CHECK (current_count >= 0 AND current_count <= max_capacity),
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                );
            """)
            st.toast("‚úÖ ÂàõÂª∫Ê±†Â°òÂÆû‰æãË°®", icon="üè†")
            # Âú® initialize_database() ÁöÑ pond_shiwa ÂàõÂª∫‰πãÂêéÂä†‰∏äÔºö
            cur.execute("""
                DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1
                        FROM information_schema.constraint_column_usage
                        WHERE table_name = 'pond_shiwa'
                        AND constraint_name = 'unique_pond_name'
                    ) THEN
                        ALTER TABLE pond_shiwa ADD CONSTRAINT unique_pond_name UNIQUE (name);
                    END IF;
                END $$;
            """)
        # 4. feed_type_shiwa
        if not table_exists(cur, 'feed_type_shiwa'):
            cur.execute("""
                CREATE TABLE feed_type_shiwa (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(50) NOT NULL UNIQUE,
                    unit_price DECIMAL(10,2) NOT NULL DEFAULT 0.00
                );
                INSERT INTO feed_type_shiwa (name, unit_price) VALUES
                ('È•≤Êñô', 10.00),
                ('Â§ßÈù¢ÂåÖËô´', 30.00),
                ('Â∞èÈù¢ÂåÖËô´', 20.00);
            """)
            st.toast("‚úÖ ÂàõÂª∫È•≤ÊñôÁ±ªÂûãË°®", icon="ü™±")

        # 5. feeding_record_shiwa
        if not table_exists(cur, 'feeding_record_shiwa'):
            cur.execute("""
                CREATE TABLE feeding_record_shiwa (
                    id SERIAL PRIMARY KEY,
                    pond_id INT NOT NULL REFERENCES pond_shiwa(id) ON DELETE CASCADE,
                    feed_type_id INT NOT NULL REFERENCES feed_type_shiwa(id) ON DELETE RESTRICT,
                    feed_weight_kg DECIMAL(8,3) NOT NULL CHECK (feed_weight_kg > 0),
                    unit_price_at_time DECIMAL(10,2) NOT NULL,
                    total_cost DECIMAL(12,2) GENERATED ALWAYS AS (feed_weight_kg * unit_price_at_time) STORED,
                    fed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    notes TEXT
                );
            """)
            st.toast("‚úÖ ÂàõÂª∫ÂñÇÂÖªËÆ∞ÂΩïË°®", icon="üçΩÔ∏è")

        # 6. stock_movement_shiwa ÂèäÊûö‰∏æ„ÄÅÁ∫¶Êùü„ÄÅËß¶ÂèëÂô®
        cur.execute("SELECT 1 FROM pg_type WHERE typname = 'movement_type_shiwa';")
        if not cur.fetchone():
            cur.execute("CREATE TYPE movement_type_shiwa AS ENUM ('transfer', 'purchase', 'hatch');")
            cur.execute("ALTER TYPE movement_type_shiwa ADD VALUE IF NOT EXISTS 'sale';")

        if not table_exists(cur, 'stock_movement_shiwa'):
            cur.execute("""
                CREATE TABLE stock_movement_shiwa (
                    id SERIAL PRIMARY KEY,
                    movement_type movement_type_shiwa NOT NULL,
                    from_pond_id INT REFERENCES pond_shiwa(id) ON DELETE SET NULL,
                    to_pond_id   INT REFERENCES pond_shiwa(id) ON DELETE RESTRICT,
                    quantity INT NOT NULL CHECK (quantity > 0),
                    description TEXT,
                    moved_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    unit_price DECIMAL(8,2)
                );
            """)
            st.toast("‚úÖ ÂàõÂª∫ËΩ¨Ê±†/Â§ñË¥≠/Â≠µÂåñËÆ∞ÂΩïË°®", icon="üîÑ")

        # -------------- Ê£ÄÊü•Á∫¶ÊùüÂçáÁ∫ßÔºàhatch ÂêàÊ≥ïÔºâ--------------
        cur.execute("""
        DO $$
        BEGIN
            IF EXISTS (SELECT 1 FROM pg_constraint
                       WHERE conname = 'chk_movement_from'
                         AND contype = 'c'
                         AND pg_get_constraintdef(oid) NOT LIKE '%hatch%') THEN
                ALTER TABLE stock_movement_shiwa DROP CONSTRAINT chk_movement_from;
            END IF;
            IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'chk_movement_from') THEN
                ALTER TABLE stock_movement_shiwa
                ADD CONSTRAINT chk_movement_from CHECK (
                    (movement_type = 'transfer' AND from_pond_id IS NOT NULL) OR
                    (movement_type = 'purchase' AND from_pond_id IS NULL) OR
                    (movement_type = 'hatch'    AND from_pond_id IS NULL)
                );
            END IF;
        END $$;
        """)

        # -------------- Ëß¶ÂèëÂô®ÂáΩÊï∞ÔºöÂØπ hatch ÂÆåÂÖ®ÊîæË°å --------------
        cur.execute("""
        CREATE OR REPLACE FUNCTION check_same_frog_type_shiwa()
        RETURNS TRIGGER AS $$
        DECLARE
            from_frog INT;
            to_frog   INT;
        BEGIN
            /* ÂÆåÂÖ®ÊîæË°å */
            IF NEW.movement_type IN ('purchase','hatch','sale') THEN
                RETURN NEW;
            END IF;

            /* ‰ª•‰∏ã‰ªÖÂØπ transfer Ê£ÄÊü•ËõôÁßç‰∏ÄËá¥ÊÄß */
            SELECT frog_type_id INTO from_frog FROM pond_shiwa WHERE id = NEW.from_pond_id;
            SELECT frog_type_id INTO to_frog   FROM pond_shiwa WHERE id = NEW.to_pond_id;

            IF from_frog IS NULL OR to_frog IS NULL THEN
                RAISE EXCEPTION 'Ê∫êÊ±†ÊàñÁõÆÊ†áÊ±†‰∏çÂ≠òÂú®';
            END IF;
            IF from_frog != to_frog THEN
                RAISE EXCEPTION 'ËΩ¨Ê±†Â§±Ë¥•ÔºöÊ∫êÊ±†‰∏éÁõÆÊ†áÊ±†ËõôÁßç‰∏çÂêåÔºàÊ∫ê:% ‚Üí ÁõÆÊ†á:%Ôºâ', from_frog, to_frog;
            END IF;

            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """)

        cur.execute("""
        DROP TRIGGER IF EXISTS trg_check_same_frog_type_shiwa ON stock_movement_shiwa;
        CREATE TRIGGER trg_check_same_frog_type_shiwa
        BEFORE INSERT OR UPDATE ON stock_movement_shiwa
        FOR EACH ROW EXECUTE FUNCTION check_same_frog_type_shiwa();
        """)
        st.toast("‚úÖ ËõôÁßç‰∏ÄËá¥ÊÄßËß¶ÂèëÂô®Â∑≤ÂçáÁ∫ßÔºàhatch ÊîæË°åÔºâ", icon="üõ°Ô∏è")

        # 7. customer_shiwa
        if not table_exists(cur, 'customer_shiwa'):
            cur.execute("""
                CREATE TABLE customer_shiwa (
                    id          SERIAL PRIMARY KEY,
                    name        VARCHAR(100) NOT NULL,
                    phone       VARCHAR(50),
                    type        VARCHAR(10) CHECK (type IN ('Èõ∂ÂîÆ','ÊâπÂèë')),
                    created_at  TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                );
            """)
            st.toast("‚úÖ ÂàõÂª∫ÂÆ¢Êà∑Ë°®", icon="üë§")

        # 8. sale_record_shiwa
        if not table_exists(cur, 'sale_record_shiwa'):
            cur.execute("""
                CREATE TABLE sale_record_shiwa (
                    id              SERIAL PRIMARY KEY,
                    pond_id         INT NOT NULL REFERENCES pond_shiwa(id) ON DELETE RESTRICT,
                    customer_id     INT NOT NULL REFERENCES customer_shiwa(id) ON DELETE RESTRICT,
                    sale_type       VARCHAR(10) CHECK (sale_type IN ('Èõ∂ÂîÆ','ÊâπÂèë')),
                    quantity        INT CHECK (quantity > 0),
                    unit_price      DECIMAL(8,2) NOT NULL,
                    total_amount    DECIMAL(10,2) GENERATED ALWAYS AS (quantity * unit_price) STORED,
                    sold_at         TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    note            TEXT
                );
            """)
            st.toast("‚úÖ ÂàõÂª∫ÈîÄÂîÆËÆ∞ÂΩïË°®", icon="üí∞")
        # 9. daily_log_shiwaÔºàÊØèÊó•ÂÖªÊÆñÊó•ÂøóÔºâ
        if not table_exists(cur, 'daily_log_shiwa'):
            cur.execute("""
                CREATE TABLE daily_log_shiwa (
                    id SERIAL PRIMARY KEY,
                    pond_id INT NOT NULL REFERENCES pond_shiwa(id) ON DELETE CASCADE,
                    log_date DATE NOT NULL,
                    water_temp DECIMAL(4,1),          -- Ê∞¥Ê∏©ÔºåÂ¶Ç 22.5
                    ph_value DECIMAL(3,1),            -- pHÂÄºÔºåÂ¶Ç 7.0
                    light_condition VARCHAR(50),      -- ÂÖâÁÖßÔºöÊï£Â∞ÑÂÖâ/Áõ¥Â∞ÑÂÖâ/Èò¥Êöó Á≠â
                    observation TEXT,                 -- ËßÇÂØüËÆ∞ÂΩïÔºàÊîØÊåÅÂ§öË°åÔºâ
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    UNIQUE (pond_id, log_date)        -- Âêå‰∏ÄÊ±†Â°òÂêå‰∏ÄÂ§©Âè™ÂÖÅËÆ∏‰∏ÄÊù°Êó•Âøó
                );
            """)
            st.toast("‚úÖ ÂàõÂª∫ÊØèÊó•ÂÖªÊÆñÊó•ÂøóË°®", icon="üìù")
        conn.commit()
    except Exception as e:
        st.error(f"‚ùå Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ§±Ë¥•: {e}")
        raise
    finally:
        cur.close()
        conn.close()

def get_recent_movements(limit=20):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT sm.id,
               CASE sm.movement_type
                   WHEN 'transfer' THEN 'ËΩ¨Ê±†'
                   WHEN 'purchase' THEN 'Â§ñË¥≠'
                   WHEN 'sale'     THEN 'ÈîÄÂîÆÂá∫Â∫ì'
               END AS movement_type,
               fp.name   AS from_name,
               tp.name   AS to_name,
               sm.quantity,
               sm.description,
               sm.moved_at
        FROM stock_movement_shiwa sm
        LEFT JOIN pond_shiwa fp ON sm.from_pond_id = fp.id
        LEFT JOIN pond_shiwa tp ON sm.to_pond_id = tp.id
        ORDER BY sm.moved_at DESC
        LIMIT %s;
    """, (limit,))
    rows = cur.fetchall()
    cur.close(); conn.close()
    return rows
# -----------------------------
# ‰∏öÂä°ÂäüËÉΩÂáΩÊï∞
# -----------------------------
def get_all_ponds():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT p.id, p.name, pt.name AS pond_type, ft.name AS frog_type, 
               p.max_capacity, p.current_count
        FROM pond_shiwa p
        JOIN pond_type_shiwa pt ON p.pond_type_id = pt.id
        JOIN frog_type_shiwa ft ON p.frog_type_id = ft.id
        ORDER BY p.id;
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows


def add_feeding_record(pond_id, feed_type_id, weight_kg, unit_price, notes, fed_at=None):
    """fed_at Ëã•ÁïôÁ©∫ÂàôÂèñ now()"""
    fed_at = fed_at or datetime.utcnow()
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO feeding_record_shiwa
        (pond_id, feed_type_id, feed_weight_kg, unit_price_at_time, notes, fed_at)
        VALUES (%s, %s, %s, %s, %s, %s);
    """, (pond_id, feed_type_id, weight_kg, unit_price, notes, fed_at))
    conn.commit()
    cur.close()
    conn.close()


def get_feed_types():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, name, unit_price FROM feed_type_shiwa ORDER BY name;")
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows

def get_pond_types():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM pond_type_shiwa ORDER BY id;")
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows

def get_frog_types():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM frog_type_shiwa;")
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows

def create_pond(name, pond_type_id, frog_type_id, max_capacity, initial_count=0):
    initial_count = max(0, min(initial_count, max_capacity))
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        # üëá ÂÖàÊ£ÄÊü•ÈáçÂêç
        cur.execute("SELECT 1 FROM pond_shiwa WHERE name = %s;", (name.strip(),))
        if cur.fetchone():
            raise ValueError(f"Ê±†Â°òÂêçÁß∞„Äå{name}„ÄçÂ∑≤Â≠òÂú®ÔºåËØ∑ÂãøÈáçÂ§çÂàõÂª∫ÔºÅ")

        cur.execute("""
            INSERT INTO pond_shiwa (name, pond_type_id, frog_type_id, max_capacity, current_count)
            VALUES (%s, %s, %s, %s, %s);
        """, (name.strip(), pond_type_id, frog_type_id, max_capacity, initial_count))
        conn.commit()
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        cur.close()
        conn.close()


def delete_all_test_data():
    """‚ö†Ô∏è Ê∏ÖÁ©∫ÊâÄÊúâÊ±†Â°ò„ÄÅËΩ¨Ê±†ËÆ∞ÂΩï„ÄÅÂñÇÂÖªËÆ∞ÂΩïÔºåÂπ∂Â§ç‰ΩçÂ∫èÂàóÔºàÂèØÈÄâÔºâ"""
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        # 1. ÂÖàÂà†Â≠êË°®
        cur.execute("TRUNCATE TABLE feeding_record_shiwa, stock_movement_shiwa RESTART IDENTITY CASCADE;")
        # 2. ÂÜçÂà†‰∏ªË°®
        cur.execute("TRUNCATE TABLE pond_shiwa RESTART IDENTITY CASCADE;")
        # 3. Â∫èÂàóÂè∑Â§ç‰ΩçÔºàÂ¶ÇÊûúËøòÊÉ≥‰øùÁïô frog_type / pond_type / feed_type ÂèØÊ≥®ÈáäÔºâ
        # cur.execute("ALTER SEQUENCE pond_shiwa_id_seq RESTART WITH 1;")
        conn.commit()
        return True
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        cur.close()
        conn.close()
def get_pond_by_id(pond_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT id, name, frog_type_id, max_capacity, current_count
        FROM pond_shiwa WHERE id = %s;
    """, (pond_id,))
    row = cur.fetchone()
    cur.close()
    conn.close()
    return row  # (id, name, frog_type_id, max_capacity, current_count)

def add_stock_movement(movement_type, from_pond_id, to_pond_id, quantity, description, unit_price=None):
    """ÊèíÂÖ•ËΩ¨Ê±†ÊàñÂ§ñË¥≠ËÆ∞ÂΩïÔºåÂπ∂Ëá™Âä®Êõ¥Êñ∞Ê±†Â≠ê current_count"""
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        # ÊèíÂÖ• movement ËÆ∞ÂΩïÔºàÁé∞Âú®ÊîØÊåÅ unit_priceÔºâ
        cur.execute("""
            INSERT INTO stock_movement_shiwa 
            (movement_type, from_pond_id, to_pond_id, quantity, description, unit_price)
            VALUES (%s, %s, %s, %s, %s, %s);
        """, (movement_type, from_pond_id, to_pond_id, quantity, description, unit_price))

        # Êõ¥Êñ∞ÁõÆÊ†áÊ±† current_count (+)
        cur.execute("""
            UPDATE pond_shiwa SET current_count = current_count + %s
            WHERE id = %s;
        """, (quantity, to_pond_id))

        # Â¶ÇÊûúÊòØËΩ¨Ê±†ÔºåÊõ¥Êñ∞Ê∫êÊ±† current_count (-)
        if from_pond_id is not None:
            cur.execute("""
                UPDATE pond_shiwa SET current_count = current_count - %s
                WHERE id = %s;
            """, (quantity, from_pond_id))

        conn.commit()
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        cur.close()
        conn.close()
def get_pond_type_id_by_name(name):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id FROM pond_type_shiwa WHERE name = %s;", (name,))
    row = cur.fetchone()
    cur.close()
    conn.close()
    return row[0] if row else None
# Âú® initialize_database() ‰πãÂêé„ÄÅrun() ‰πãÂâçÂÆö‰πâÔºàÊàñÂú® run() ÂºÄÂ§¥ÁºìÂ≠òÂà∞ session_stateÔºâ
def get_pond_type_map():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM pond_type_shiwa;")
    mapping = {row[1]: row[0] for row in cur.fetchall()}
    cur.close()
    conn.close()
    return mapping
# ---------- ÂÆ¢Êà∑ ----------
def get_customers():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, name, phone, type FROM customer_shiwa ORDER BY id;")
    rows = cur.fetchall()
    cur.close(); conn.close()
    return rows

def add_customer(name, phone, ctype):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO customer_shiwa (name, phone, type) VALUES (%s,%s,%s) RETURNING id;",
        (name, phone, ctype)
    )
    cid = cur.fetchone()[0]
    conn.commit(); cur.close(); conn.close()
    return cid

# ---------- ÈîÄÂîÆ ----------
def do_sale(pond_id, customer_id, sale_type, qty, unit_price, note=""):
    """Êàê‰∫§ + Êâ£Â∫ìÂ≠ò + ÂÜô movement"""
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        # 1. ÈîÄÂîÆËÆ∞ÂΩï
        cur.execute("""
            INSERT INTO sale_record_shiwa (pond_id, customer_id, sale_type, quantity, unit_price, note)
            VALUES (%s,%s,%s,%s,%s,%s);
        """, (pond_id, customer_id, sale_type, qty, unit_price, note))

        # 2. Êâ£Â∫ìÂ≠ò
        cur.execute(
            "UPDATE pond_shiwa SET current_count = current_count - %s WHERE id = %s;",
            (qty, pond_id)
        )

        # 3. ‚≠ê ÊääÈîÄÂîÆÂΩìÊàê‚ÄúÂá∫Â∫ì‚ÄùËÆ∞ÂΩïÔºåmovement_type = 'sale'
        cur.execute("""
            INSERT INTO stock_movement_shiwa (movement_type, from_pond_id, to_pond_id, quantity, description)
            VALUES ('sale', %s, NULL, %s, %s);
        """, (pond_id, qty, f"ÈîÄÂîÆÔºö{sale_type} {qty} Âè™ÔºåÂçï‰ª∑{unit_price}ÂÖÉ"))

        conn.commit()
    except Exception as e:
        conn.rollback()
        raise
    finally:
        cur.close(); conn.close()

# ---------- ÊúÄËøëÈîÄÂîÆ ----------
def get_recent_sales(limit=20):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT sr.id, p.name pond, c.name customer, sr.sale_type, sr.quantity,
               sr.unit_price, sr.total_amount, sr.sold_at, sr.note
        FROM sale_record_shiwa sr
        JOIN pond_shiwa p ON p.id = sr.pond_id
        JOIN customer_shiwa c ON c.id = sr.customer_id
        ORDER BY sr.sold_at DESC
        LIMIT %s;
    """, (limit,))
    rows = cur.fetchall()
    cur.close(); conn.close()
    return rows
# -----------------------------
# ROI ÂàÜÊûê‰∏ìÁî®ÂáΩÊï∞
# -----------------------------
def get_roi_data():
    conn = get_db_connection()
    cur = conn.cursor()

    # Ëé∑ÂèñÊâÄÊúâËõôÁßçÔºàÁ°Æ‰øùÁªÜÁöÆËõô„ÄÅÁ≤óÁöÆËõôÈÉΩÂú®Ôºâ
    cur.execute("SELECT name FROM frog_type_shiwa ORDER BY name;")
    all_frog_types = [row[0] for row in cur.fetchall()]
    if not all_frog_types:
        all_frog_types = ["ÁªÜÁöÆËõô", "Á≤óÁöÆËõô"]  # ÂÆâÂÖ®ÂÖúÂ∫ï

    # 1. ÂñÇÂÖªÊàêÊú¨
    cur.execute("""
        SELECT ft.name, COALESCE(SUM(fr.total_cost), 0)
        FROM frog_type_shiwa ft
        LEFT JOIN pond_shiwa p ON ft.id = p.frog_type_id
        LEFT JOIN feeding_record_shiwa fr ON p.id = fr.pond_id
        GROUP BY ft.name;
    """)
    feed_dict = {row[0]: float(row[1]) for row in cur.fetchall()}

    # 2. Â§ñË¥≠ÊàêÊú¨Ôºà‰ΩøÁî® unit_priceÔºåËã•‰∏∫ NULL ÂàôÊåâ 20.0 ‰º∞ÁÆóÔºâ
    cur.execute("""
        SELECT ft.name, 
               COALESCE(SUM(sm.quantity * COALESCE(sm.unit_price, 20.0)), 0) AS total_cost
        FROM frog_type_shiwa ft
        LEFT JOIN pond_shiwa p ON ft.id = p.frog_type_id
        LEFT JOIN stock_movement_shiwa sm 
            ON p.id = sm.to_pond_id AND sm.movement_type = 'purchase'
        GROUP BY ft.name;
    """)
    purchase_dict = {row[0]: float(row[1]) for row in cur.fetchall()}

    # 3. ÈîÄÂîÆÊî∂ÂÖ•
    cur.execute("""
        SELECT ft.name, COALESCE(SUM(sr.total_amount), 0)
        FROM frog_type_shiwa ft
        LEFT JOIN pond_shiwa p ON ft.id = p.frog_type_id
        LEFT JOIN sale_record_shiwa sr ON p.id = sr.pond_id
        GROUP BY ft.name;
    """)
    sales_dict = {row[0]: float(row[1]) for row in cur.fetchall()}

    cur.close()
    conn.close()

    # ÊûÑÂª∫ÁªìÊûúÔºàÁ°Æ‰øùÊâÄÊúâËõôÁßçÈÉΩÊúâË°åÔºâ
    result = []
    for frog_type in all_frog_types:
        feed = feed_dict.get(frog_type, 0.0)
        purchase = purchase_dict.get(frog_type, 0.0)
        total_cost = feed + purchase
        income = sales_dict.get(frog_type, 0.0)
        profit = income - total_cost
        roi = (profit / total_cost * 100) if total_cost > 0 else 0.0

        result.append({
            "ËõôÁßç": frog_type,
            "ÂñÇÂÖªÊàêÊú¨ (¬•)": round(feed, 2),
            "Â§ñË¥≠ÊàêÊú¨ (¬•)": round(purchase, 2),
            "ÊÄªÊàêÊú¨ (¬•)": round(total_cost, 2),
            "ÈîÄÂîÆÊî∂ÂÖ• (¬•)": round(income, 2),
            "ÂáÄÂà©Ê∂¶ (¬•)": round(profit, 2),
            "ROI (%)": round(roi, 2)
        })

    return result
def get_pond_roi_details():
    """Ëé∑ÂèñÊØè‰∏™Ê±†Â°òÁöÑÂñÇÂÖª„ÄÅÂ§ñË¥≠„ÄÅÈîÄÂîÆÊòéÁªÜÔºåÁî®‰∫é ROI ÊòéÁªÜÂàÜÊûê"""
    conn = get_db_connection()
    cur = conn.cursor()

    # 1. ÂñÇÂÖªÊòéÁªÜ
    cur.execute("""
        SELECT 
            p.name AS pond_name,
            ft.name AS frog_type,
            fr.feed_weight_kg,
            ftype.name AS feed_type,
            fr.unit_price_at_time,
            fr.total_cost,
            fr.fed_at
        FROM feeding_record_shiwa fr
        JOIN pond_shiwa p ON fr.pond_id = p.id
        JOIN frog_type_shiwa ft ON p.frog_type_id = ft.id
        JOIN feed_type_shiwa ftype ON fr.feed_type_id = ftype.id
        ORDER BY fr.fed_at DESC;
    """)
    feedings = cur.fetchall()

    # 2. Â§ñË¥≠ÊòéÁªÜÔºàmovement_type = 'purchase'Ôºâ
    cur.execute("""
        SELECT 
            p.name AS pond_name,
            ft.name AS frog_type,
            sm.quantity,
            sm.unit_price,
            (sm.quantity * COALESCE(sm.unit_price, 20.0)) AS total_cost,
            sm.moved_at
        FROM stock_movement_shiwa sm
        JOIN pond_shiwa p ON sm.to_pond_id = p.id
        JOIN frog_type_shiwa ft ON p.frog_type_id = ft.id
        WHERE sm.movement_type = 'purchase'
        ORDER BY sm.moved_at DESC;
    """)
    purchases = cur.fetchall()

    # 3. ÈîÄÂîÆÊòéÁªÜ
    cur.execute("""
        SELECT 
            p.name AS pond_name,
            ft.name AS frog_type,
            sr.quantity,
            sr.unit_price,
            sr.total_amount,
            sr.sold_at,
            c.name AS customer_name
        FROM sale_record_shiwa sr
        JOIN pond_shiwa p ON sr.pond_id = p.id
        JOIN frog_type_shiwa ft ON p.frog_type_id = ft.id
        JOIN customer_shiwa c ON sr.customer_id = c.id
        ORDER BY sr.sold_at DESC;
    """)
    sales = cur.fetchall()

    cur.close()
    conn.close()

    return feedings, purchases, sales
def add_daily_log(pond_id, log_date, water_temp, ph_value, light_condition, observation):
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            INSERT INTO daily_log_shiwa 
            (pond_id, log_date, water_temp, ph_value, light_condition, observation)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON CONFLICT (pond_id, log_date)
            DO UPDATE SET
                water_temp = EXCLUDED.water_temp,
                ph_value = EXCLUDED.ph_value,
                light_condition = EXCLUDED.light_condition,
                observation = EXCLUDED.observation,
                updated_at = NOW();
        """, (pond_id, log_date, water_temp, ph_value, light_condition, observation))
        conn.commit()
        st.success("‚úÖ ÊØèÊó•Êó•ÂøóÂ∑≤‰øùÂ≠òÔºÅ")
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        cur.close()
        conn.close()

def get_daily_logs(limit=50):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT dl.log_date, p.name, dl.water_temp, dl.ph_value, dl.light_condition, dl.observation
        FROM daily_log_shiwa dl
        JOIN pond_shiwa p ON dl.pond_id = p.id
        ORDER BY dl.log_date DESC, dl.created_at DESC
        LIMIT %s;
    """, (limit,))
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows
# ================== ‚ë° AI ÈóÆÁ≠î‰∏ìÁî®ÂáΩÊï∞ ==================
def get_ai_client():
    """Áªü‰∏ÄÊãøÂà∞ DashScope ÂÖºÂÆπ OpenAI ÂÆ¢Êà∑Á´Ø"""
    api_key = os.getenv("DASHSCOPE_API_KEY")
    if not api_key:
        raise RuntimeError("ËØ∑Âú® .env ÈáåÈÖçÁΩÆ DASHSCOPE_API_KEY")
    return OpenAI(api_key=api_key,
                  base_url="https://dashscope.aliyuncs.com/compatible-mode/v1")

@st.cache_data(show_spinner=False)
def get_db_schema_for_ai():
    """‰∏ÄÊ¨°ÊÄßÊää schema ÊäìÂõûÊù•Áªô AIÔºåÂè™ÊäìË°®Âêç-ÂàóÂêç-Á±ªÂûãÔºå‰∏çÂÅöÊï∞ÊçÆ"""
    engine = create_engine(DATABASE_URL)
    inspector = inspect(engine)
    schema = {}
    for t in inspector.get_table_names():
        schema[t] = [{"col": c["name"], "type": str(c["type"])}
                     for c in inspector.get_columns(t)]
    return schema


def execute_safe_select(sql: str) -> pd.DataFrame:
    """Âè™ÂÖÅËÆ∏ SELECTÔºåËøîÂõû DataFrame"""
    sql = sql.strip()
    if not sql.lower().startswith("select"):
        raise ValueError("‰ªÖÂÖÅËÆ∏ SELECT Êü•ËØ¢")
    engine = create_engine(DATABASE_URL)
    with engine.connect() as conn:
        return pd.read_sql(text(sql), conn)


def ai_ask_database(question: str):
    """‰∏§Èò∂ÊÆµÔºöÁîüÊàê SQL -> Ëá™ÁÑ∂ËØ≠Ë®ÄÂõûÁ≠î"""
    client = get_ai_client()
    schema = get_db_schema_for_ai()

    tools = [{
        "type": "function",
        "function": {
            "name": "execute_sql_query",
            "description": "ÁîüÊàêÂÆâÂÖ®ÁöÑ SELECT Êü•ËØ¢",
            "parameters": {
                "type": "object",
                "properties": {
                    "sql": {"type": "string"},
                    "explanation": {"type": "string"}
                },
                "required": ["sql", "explanation"]
            }
        }
    }]

    sys_prompt = f"""
‰Ω†ÊòØÁü≥ËõôÂÖªÊÆñÂú∫Êï∞ÊçÆÂàÜÊûêÂ∏àÔºåÊï∞ÊçÆÂ∫ì schema Â¶Ç‰∏ãÔºà‰ªÖ‰ΩøÁî®Â≠òÂú®ÁöÑË°®ÂíåÂ≠óÊÆµÔºâÔºö
{json.dumps(schema, ensure_ascii=False, indent=2)}

ÂøÖÈ°ªË∞ÉÁî® execute_sql_query ÂáΩÊï∞ÔºåËßÑÂàôÔºö
- Âè™ÁîüÊàê SELECT
- Ë°®Âêç/Â≠óÊÆµ‰∏•Ê†º‰∏é‰∏äÈù¢‰∏ÄËá¥
- Áî®‰∏≠ÊñáÂÜô explanation
"""

    response = client.chat.completions.create(
        model="qwen-plus",
        messages=[{"role": "system", "content": sys_prompt},
                  {"role": "user", "content": question}],
        tools=tools,
        tool_choice={"type": "function", "function": {"name": "execute_sql_query"}},
        temperature=0.1
    )

    args = json.loads(response.choices[0].message.tool_calls[0].function.arguments)
    sql = args["sql"]
    df = execute_safe_select(sql)

    # Á¨¨‰∫åÈò∂ÊÆµÔºöÁî®Êï∞ÊçÆÂõûÁ≠îÁî®Êà∑
    second = client.chat.completions.create(
        model="qwen-plus",
        messages=[
            {"role": "system", "content": "‰Ω†ÊòØÁü≥ËõôÂÖªÊÆñÂú∫Âú∫ÈïøÔºåÁî®ÁÆÄÊ¥Å‰∏≠ÊñáÁõ¥Êé•ÂõûÁ≠îÁî®Êà∑ÈóÆÈ¢òÔºå‰∏çË¶ÅÊèê SQL ÊàñÊäÄÊúØËØçÊ±á„ÄÇ"},
            {"role": "user", "content": f"Áî®Êà∑ÈóÆÈ¢òÔºö{question}\nÊü•ËØ¢ÁªìÊûúÔºö\n{df.head(15).to_string(index=False)}"}
        ],
        temperature=0.3
    )
    return second.choices[0].message.content.strip(), sql, df
# =======================================================
# ----------------------------- ‚ë† Ê±†Â≠êÂàÜÁªÑ -----------------------------
def group_ponds_by_type(pond_dict):
        from collections import defaultdict
        grouped = defaultdict(list)
        for pid, info in pond_dict.items():
            grouped[info["pond_type"]].append(
                (pid, f"{info['name']}  ÔºàÂΩìÂâç {info['current_count']} / {info['max_capacity']}Ôºâ")
            )
        return grouped


    # ----------------------------- ‚ë° ‰∏§Á∫ßÈÄâÊã©ÁªÑ‰ª∂ -----------------------------
def pond_selector(label, candidate_dict, grouped, key):
        """‰∏§Ê≠•ÈÄâÊ±†ÔºöÂÖàÁ±ªÂûã ‚Üí ÂÜçÂÖ∑‰ΩìÊ±†Â≠ê"""
        col1, col2 = st.columns([1, 2])
        with col1:
            type_pick = st.selectbox(f"{label} ¬∑ Á±ªÂûã", options=list(grouped.keys()), key=f"{key}_type")
        with col2:
            pid_pick = st.selectbox(f"{label} ¬∑ Ê±†Â≠ê", options=[p[0] for p in grouped[type_pick]],
                                    format_func=lambda x: next(p[1] for p in grouped[type_pick] if p[0] == x),
                                    key=f"{key}_pond")
        return pid_pick
# -----------------------------
# ‰∏ªÂ∫îÁî®ÂÖ•Âè£
# -----------------------------
def run():
    st.set_page_config(page_title="Áü≥ËõôÂÖªÊÆñÂú∫ÁÆ°ÁêÜÁ≥ªÁªü", layout="wide")
    
    # üöÄ Ëá™Âä®ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìÔºàÂè™Âú®È¶ñÊ¨°Âä†ËΩΩÊó∂ÊâßË°å‰∏ÄÊ¨°Ôºâ
    if "db_initialized" not in st.session_state:
        initialize_database()
        st.session_state.db_initialized = True

    st.title("üê∏ Áü≥ËõôÂÖªÊÆñÂú∫ÁÆ°ÁêÜÁ≥ªÁªü")
    st.markdown("---")

    # ÂàõÂª∫‰∏â‰∏™ Tab
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs(
    ["üìä Ê±†Â°òÊÄªËßà", "üçΩÔ∏è ÂñÇÂÖªÊó•Âøó", "‚ûï Ê±†Â°òÂàõÂª∫", "üîÑ Â≠µËΩ¨Ê±†‰∏éÂ§ñË¥≠", 
     "ü™± È•≤ÊñôÁ±ªÂûã", "üí∞ ÈîÄÂîÆËÆ∞ÂΩï", "üìà ÊäïËµÑÂõûÊä•ÔºàROIÔºâ"]
)

        # Tab 1: Ê±†Â°òÊÄªËßàÔºàË°®Ê†º + ÂõæË°®Ôºâ
    with tab1:
                                # ================== ‚ë¢ Êñ∞Â¢ûÔºöAI ÈóÆÁ≠îÂ≠êÊ®°Âùó ==================
        st.markdown("---")
        st.subheader("ü§ñ AI ÂÖªÊÆñÂú∫ÈóÆÁ≠î")
        st.caption("‰æãÔºö„ÄåÁé∞Âú®ÂÖ®Âú∫ÂÖ±ÊúâÂ§öÂ∞ëÂè™ËõôÔºü‚Äù„ÄÅ‚ÄúÂì™Á±ªÊ±†Â°òÂç†Áî®ÁéáÊúÄÈ´òÔºü„Äç")
        if "ai_chat_history" not in st.session_state:
            st.session_state.ai_chat_history = []

        # ÊòæÁ§∫ÂéÜÂè≤
        for q, a in st.session_state.ai_chat_history:
            with st.chat_message("user"):
                st.write(q)
            with st.chat_message("assistant"):
                st.write(a)

        # Áî®Êà∑ËæìÂÖ•
        if q := st.chat_input("ËæìÂÖ•‰Ω†ÁöÑÈóÆÈ¢òÔºåÊåâÂõûËΩ¶"):
            with st.chat_message("user"):
                st.write(q)
            with st.chat_message("assistant"):
                with st.spinner("AI Ê≠£Âú®Êü•ËØ¢Êï∞ÊçÆÂ∫ì..."):
                    try:
                        answer, sql, df = ai_ask_database(q)
                        st.write(answer)
                        with st.expander("üîç ÊäÄÊúØËØ¶ÊÉÖÔºàÁÇπÂáªÂ±ïÂºÄÔºâ"):
                            st.code(sql, language="sql")
                            st.dataframe(df.head(20), use_container_width=True)
                        st.session_state.ai_chat_history.append((q, answer))
                    except Exception as e:
                        st.error(f"Êü•ËØ¢Â§±Ë¥•Ôºö{e}")

        if st.button("üóëÔ∏è Ê∏ÖÁ©∫ÂØπËØù"):
            st.session_state.ai_chat_history.clear()
            st.rerun()
        # =======================================================
        st.subheader("üìä ÊâÄÊúâÊ±†Â°òÁä∂ÊÄÅ")
        ponds = get_all_ponds()
        
        if not ponds:
            st.warning("ÊöÇÊó†Ê±†Â°ò„ÄÇËØ∑Âú®„ÄåÊ±†Â°òÂàõÂª∫„ÄçTab ‰∏≠Ê∑ªÂä†ÔºåÊàñÁÇπÂáª„Äå‰∏ÄÈîÆÂàùÂßãÂåñÁ§∫‰æãÊï∞ÊçÆ„Äç„ÄÇ")
        else:
            # ËΩ¨‰∏∫ DataFrame ‰æø‰∫éÂ±ïÁ§∫ÂíåÁªòÂõæ
            import pandas as pd
            df = pd.DataFrame(
                ponds,
                columns=["ID", "ÂêçÁß∞", "Ê±†Á±ªÂûã", "ËõôÁßç", "ÊúÄÂ§ßÂÆπÈáè", "ÂΩìÂâçÊï∞Èáè"]
            )
            df["Âç†Áî®Áéá (%)"] = (df["ÂΩìÂâçÊï∞Èáè"] / df["ÊúÄÂ§ßÂÆπÈáè"] * 100).round(1)
            df["Âç†Áî®Áéá (%)"] = df["Âç†Áî®Áéá (%)"].clip(upper=100)  # Èò≤Ê≠¢Ë∂ÖÂÆπÊòæÁ§∫ >100

            # ÂèØÈÄâÔºöÁ≠õÈÄâÂô®
            col1, col2 = st.columns(2)
            with col1:
                frog_filter = st.multiselect(
                    "ÊåâËõôÁßçÁ≠õÈÄâ",
                    options=df["ËõôÁßç"].unique(),
                    default=df["ËõôÁßç"].unique()
                )
            with col2:
                type_filter = st.multiselect(
                    "ÊåâÊ±†Á±ªÂûãÁ≠õÈÄâ",
                    options=df["Ê±†Á±ªÂûã"].unique(),
                    default=df["Ê±†Á±ªÂûã"].unique()
                )

            # Â∫îÁî®Á≠õÈÄâ
            filtered_df = df[
                (df["ËõôÁßç"].isin(frog_filter)) &
                (df["Ê±†Á±ªÂûã"].isin(type_filter))
            ].copy()

            if filtered_df.empty:
                st.info("Ê≤°ÊúâÂåπÈÖçÁöÑÊ±†Â°ò„ÄÇ")
            else:
                # === Ë°®Ê†ºÂ±ïÁ§∫ ===
                st.dataframe(
                    filtered_df[["ÂêçÁß∞", "Ê±†Á±ªÂûã", "ËõôÁßç", "ÂΩìÂâçÊï∞Èáè", "ÊúÄÂ§ßÂÆπÈáè", "Âç†Áî®Áéá (%)"]],
                    use_container_width=True,
                    hide_index=True
                )

                # === ÂõæË°®Â±ïÁ§∫ ===
                st.markdown("### üìà Ê±†Â°òÂÆπÈáèÂç†Áî®Áéá")
                chart_data = filtered_df.set_index("ÂêçÁß∞")["Âç†Áî®Áéá (%)"]
                st.bar_chart(chart_data, height=400)


    # Tab 2: ÂñÇÂÖªËÆ∞ÂΩïÔºàÂΩïÂÖ• + ÊÄªËßàÔºâ
    with tab2:
        st.subheader("üçΩÔ∏è ÂñÇÂÖªÊó•Âøó")
        ponds = get_all_ponds()
        feed_types = get_feed_types()

        if not ponds:
            st.error("ËØ∑ÂÖàÂàõÂª∫Ê±†Â°òÔºÅ")
        elif not feed_types:
            st.error("ü™± Â∞öÊú™ÈÖçÁΩÆ‰ªª‰ΩïÈ•≤ÊñôÁ±ªÂûãÔºåËØ∑ÂàáÊç¢Âà∞„ÄêÈ•≤ÊñôÁ±ªÂûã„ÄëTab Ê∑ªÂä†Ëá≥Â∞ë‰∏ÄÁßçÈ•≤Êñô„ÄÇ")
        else:
            # ‚Äî‚Äî ÂΩïÂÖ•Âå∫Âüü ‚Äî‚Äî
            with st.form("feeding_form"):
                c1, c2 = st.columns(2)
                with c1:
                    pond_dict = {p[0]: {
                        "name": p[1], "pond_type": p[2],
                        "current_count": p[5], "max_capacity": p[4]
                    } for p in ponds}
                    grouped = group_ponds_by_type(pond_dict)
                    pond_id = pond_selector("ÊäïÂñÇÊ±†Â°ò", pond_dict, grouped, key="feed")

                with c2:
                    feed_id = st.selectbox(
                        "È•≤ÊñôÁ±ªÂûã",
                        options=[f[0] for f in feed_types],
                        format_func=lambda x: f"{next(f[1] for f in feed_types if f[0] == x)} (¬•{next(f[2] for f in feed_types if f[0] == x)}/kg)"
                    )
                weight = st.number_input("ÂñÇÂÖªÈáçÈáè (kg)", min_value=0.1, step=0.1)

                # Êó•Êúü+Êó∂ÊÆµ
                col_d, col_t = st.columns(2)
                with col_d:
                    feed_date = st.date_input("ÊäïÂñÇÊó•Êúü", value=datetime.today())
                with col_t:
                    ampm = st.selectbox("Êó∂ÊÆµ", ["‰∏äÂçà", "‰∏ãÂçà"])

                                # ---- Âø´Êç∑Â§áÊ≥® ----
                quick_feed_note = st.selectbox("Âø´Êç∑Â§áÊ≥®", COMMON_REMARKS["ÂñÇÂÖªÂ§áÊ≥®"], key="quick_feed")
                notes = st.text_area("Â§áÊ≥®ÔºàÂèØÈÄâÔºâ", value=quick_feed_note)
                submitted = st.form_submit_button("‚úÖ Êèê‰∫§ÂñÇÂÖªËÆ∞ÂΩï")

                if submitted:
                    unit_price = next(f[2] for f in feed_types if f[0] == feed_id)
                    feed_dt = datetime.combine(feed_date, time(10 if ampm == "‰∏äÂçà" else 15, 0))
                    add_feeding_record(pond_id, feed_id, weight, float(unit_price), notes, feed_dt)
                    st.success("‚úÖ ÂñÇÂÖªËÆ∞ÂΩïÂ∑≤‰øùÂ≠òÔºÅ")
                    st.rerun()

                st.markdown("---")
                st.subheader("üìä ÂñÇÈ£üÊÄªËßà")
                conn = get_db_connection()
                cur = conn.cursor()
                cur.execute("""
                    SELECT
                        DATE(fr.fed_at AT TIME ZONE 'UTC' AT TIME ZONE '+08') AS Êó•Êúü,
                        CASE WHEN EXTRACT(HOUR FROM fr.fed_at AT TIME ZONE 'UTC' AT TIME ZONE '+08') < 12
                            THEN '‰∏äÂçà'
                            ELSE '‰∏ãÂçà'
                        END AS Êó∂ÊÆµ,
                        ft.name         AS ËõôÁßç,
                        ftype.name      AS È•≤Êñô,
                        SUM(fr.feed_weight_kg) AS ÊÄªÈáçÈáèkg,
                        SUM(fr.total_cost)     AS ÊÄªÊàêÊú¨
                    FROM feeding_record_shiwa fr
                    JOIN pond_shiwa p   ON fr.pond_id  = p.id
                    JOIN frog_type_shiwa ft ON p.frog_type_id = ft.id
                    JOIN feed_type_shiwa ftype ON fr.feed_type_id = ftype.id
                    GROUP BY Êó•Êúü, Êó∂ÊÆµ, ft.name, ftype.name
                    ORDER BY Êó•Êúü DESC, Êó∂ÊÆµ;
                """)
                rows = cur.fetchall()
                cur.close(); conn.close()

                if rows:
                    import pandas as pd
                    df = pd.DataFrame(rows, columns=["Êó•Êúü", "Êó∂ÊÆµ", "ËõôÁßç", "È•≤Êñô", "ÊÄªÈáçÈáèkg", "ÊÄªÊàêÊú¨"])
                    st.dataframe(df, use_container_width=True, hide_index=True)
                else:
                    st.info("ÊöÇÊó†ÂñÇÂÖªËÆ∞ÂΩï")
        st.markdown("---")
        st.subheader("üìù ÊØèÊó•ÂÖªÊÆñÊó•ÂøóÔºàÊ∞¥Ê∏© / pH / ËßÇÂØüÁ≠âÔºâ")

        with st.form("daily_log_form"):
            c1, c2 = st.columns(2)
            with c1:
                pond_dict_dl = {p[0]: {
                    "name": p[1], "pond_type": p[2],
                    "current_count": p[5], "max_capacity": p[4]
                } for p in ponds}
                grouped_dl = group_ponds_by_type(pond_dict_dl)
                dl_pond_id = pond_selector("Êó•ÂøóÊ±†Â°ò", pond_dict_dl, grouped_dl, key="daily")
            with c2:
                dl_date = st.date_input("Êó•ÂøóÊó•Êúü", value=datetime.today(), key="dl_date")

            col_temp, col_ph, col_light = st.columns(3)
            with col_temp:
                water_temp = st.number_input("Ê∞¥Ê∏© (‚ÑÉ)", min_value=0.0, max_value=40.0, step=0.5, value=22.0)
            with col_ph:
                ph_value = st.number_input("pH ÂÄº", min_value=0.0, max_value=14.0, step=0.1, value=7.0)
            with col_light:
                light_condition = st.selectbox(
                    "ÂÖâÁÖßÊù°‰ª∂",
                    options=["Êï£Â∞ÑÂÖâ", "Áõ¥Â∞ÑÂÖâ", "Èò¥Êöó", "‰∫∫Â∑•Ë°•ÂÖâ", "ÂÖ∂‰ªñ"],
                    index=0
                )
                if light_condition == "ÂÖ∂‰ªñ":
                    light_condition = st.text_input("Ëá™ÂÆö‰πâÂÖâÁÖß", "ËØ∑Â°´ÂÜô")

                            # ---- Âø´Êç∑ËßÇÂØü ----
            quick_observe = st.selectbox("Âø´Êç∑ËßÇÂØü", COMMON_REMARKS["ÊØèÊó•ËßÇÂØü"], key="quick_observe")
            observation = st.text_area("ËßÇÂØüËÆ∞ÂΩïÔºàÂèØËÆ∞ÂΩïÂçµÂùó„ÄÅË°å‰∏∫„ÄÅÂºÇÂ∏∏Á≠âÔºâ", value=quick_observe, height=120)

            dl_submitted = st.form_submit_button("‚úÖ ‰øùÂ≠òÊØèÊó•Êó•Âøó")
            if dl_submitted:
                add_daily_log(
                    pond_id=dl_pond_id,
                    log_date=dl_date,
                    water_temp=water_temp,
                    ph_value=ph_value,
                    light_condition=light_condition,
                    observation=observation.strip()
                )
                st.rerun()
        st.markdown("### üìñ ÂéÜÂè≤ÊØèÊó•Êó•Âøó")
        dl_records = get_daily_logs(30)
        if dl_records:
            import pandas as pd
            df_dl = pd.DataFrame(dl_records, columns=["Êó•Êúü", "Ê±†Â°ò", "Ê∞¥Ê∏©(‚ÑÉ)", "pH", "ÂÖâÁÖß", "ËßÇÂØüËÆ∞ÂΩï"])
            st.dataframe(df_dl, use_container_width=True, hide_index=True)
        else:
            st.info("ÊöÇÊó†ÊØèÊó•Êó•ÂøóËÆ∞ÂΩï")

    with tab3:
        st.subheader("ÂàõÂª∫Êñ∞Ê±†Â°ò")
        pond_types = get_pond_types()
        frog_types = get_frog_types()

        with st.form("pond_create_form"):
            name = st.text_input("Ê±†Â°òÂêçÁß∞", placeholder="‰æãÂ¶ÇÔºöÁªÜÁöÆËõôÂ≠µÂåñÊ±†-001")
            pond_type_id = st.selectbox(
                "Ê±†Â°òÁ±ªÂûã",
                options=[pt[0] for pt in pond_types],
                format_func=lambda x: next(pt[1] for pt in pond_types if pt[0] == x)
            )
            frog_type_id = st.selectbox(
                "ËõôÁßçÁ±ªÂûã",
                options=[ft[0] for ft in frog_types],
                format_func=lambda x: next(ft[1] for ft in frog_types if ft[0] == x)
            )
            max_cap = st.number_input(
                "ÊúÄÂ§ßÂÆπÈáèÔºàÂèØËá™Áî±ËÆæÁΩÆÔºåÂª∫ËÆÆÊ†πÊçÆÊ±†Â°òÂÆûÈôÖÈù¢ÁßØÂ°´ÂÜôÔºâ",
                min_value=1,
                value=500,
                step=10,
                format="%d"
            )
            initial = st.number_input(
                "ÂàùÂßãÊï∞ÈáèÔºà‰∏çËÉΩË∂ÖËøáÊúÄÂ§ßÂÆπÈáèÔºâ",
                min_value=0,
                value=0,
                step=1,
                format="%d"
            )

            submitted = st.form_submit_button("‚úÖ ÂàõÂª∫Ê±†Â°ò")
            if submitted:
                if not name.strip():
                    st.error("ËØ∑ËæìÂÖ•Ê±†Â°òÂêçÁß∞ÔºÅ")
                else:
                    try:
                        create_pond(name.strip(), pond_type_id, frog_type_id, int(max_cap), int(initial))
                        st.success(f"‚úÖ Ê±†Â°ò„Äå{name}„ÄçÂàõÂª∫ÊàêÂäüÔºÅÂÆπÈáèÔºö{max_cap}ÔºåÂàùÂßãÊï∞ÈáèÔºö{initial}")
                        st.rerun()
                    except Exception as e:
                        if "unique_pond_name" in str(e) or "Â∑≤Â≠òÂú®" in str(e):
                            st.error(f"‚ùå ÂàõÂª∫Â§±Ë¥•ÔºöÊ±†Â°òÂêçÁß∞„Äå{name}„ÄçÂ∑≤Â≠òÂú®ÔºåËØ∑Êç¢‰∏Ä‰∏™ÂêçÁß∞ÔºÅ")
                        else:
                            st.error(f"‚ùå ÂàõÂª∫Â§±Ë¥•: {e}")

        # ================= Êñ∞Â¢ûÔºöÂÆûÊó∂Â±ïÁ§∫Â∑≤ÂàõÂª∫Ê±†Â≠ê =================
        st.markdown("---")
        st.subheader("üìã Â∑≤ÂàõÂª∫ÁöÑÊ±†Â°ò")
        ponds_now = get_all_ponds()          # Â§çÁî®Â∑≤ÊúâÂáΩÊï∞ÔºåÂÆûÊó∂Êü•Â∫ì
        if not ponds_now:
            st.info("ÊöÇÊó†Ê±†Â°òÔºåÂø´ÂéªÂàõÂª∫Á¨¨‰∏Ä‰∏™ÂêßÔºÅ")
        else:
            import pandas as pd
            df = pd.DataFrame(
                ponds_now,
                columns=["ID", "ÂêçÁß∞", "Ê±†Á±ªÂûã", "ËõôÁßç", "ÊúÄÂ§ßÂÆπÈáè", "ÂΩìÂâçÊï∞Èáè"]
            )
            # ËÆ©ÊúÄÊñ∞ÂàõÂª∫ÁöÑÊéíÂú®ÊúÄ‰∏äÈù¢
            df = df.iloc[::-1].reset_index(drop=True)
            st.dataframe(df, use_container_width=True, hide_index=True)
        # ==========================================================

        st.markdown("---")
        st.subheader("‚ö†Ô∏è Âç±Èô©Âå∫ÂüüÔºöÊ∏ÖÁ©∫ÊµãËØïÊï∞ÊçÆ")
        st.caption("**‰∏ÄÈîÆÂà†Èô§ÊâÄÊúâÊ±†Â°ò„ÄÅËΩ¨Ê±†„ÄÅÂñÇÂÖªËÆ∞ÂΩïÔºÅÊìç‰Ωú‰∏çÂèØÊÅ¢Â§ç**")
        if st.checkbox("ÊàëÂ∑≤Á°ÆËÆ§Ë¶ÅÊ∏ÖÁ©∫ÂÖ®ÈÉ®ÊµãËØïÊï∞ÊçÆ"):
            if st.button("üóëÔ∏è ‰∏ÄÈîÆÊ∏ÖÁ©∫ÊâÄÊúâÊµãËØïÊï∞ÊçÆ", type="secondary"):
                try:
                    delete_all_test_data()
                    st.success("‚úÖ ÊâÄÊúâÊµãËØïÊï∞ÊçÆÂ∑≤Ê∏ÖÁ©∫ÔºÅ")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Ê∏ÖÁ©∫Â§±Ë¥•: {e}")

   
    # ----------------------------- Tab 4: ËΩ¨Ê±† ¬∑ Â§ñË¥≠ ¬∑ Â≠µÂåñ -----------------------------
    with tab4:
        st.subheader("üîÑ ËΩ¨Ê±† / Â§ñË¥≠ / Â≠µÂåñÊìç‰Ωú")
        operation = st.radio("Êìç‰ΩúÁ±ªÂûã", ["ËΩ¨Ê±†", "Â§ñË¥≠", "Â≠µÂåñ"], horizontal=True, key="op_type")

        ponds = get_all_ponds()
        if not ponds:
            st.warning("ËØ∑ÂÖàÂàõÂª∫Ëá≥Â∞ë‰∏Ä‰∏™Ê±†Â°òÔºÅ")
            # ‚úÖ ‰∏çÁî® st.stop()ÔºåÁõ¥Êé•Ë∑≥ËøáÊú¨ Tab Ââ©‰ΩôÂÜÖÂÆπ
        else:
            pond_id_to_info = {p[0]: {
                "name": p[1], "pond_type": p[2].strip(),
                "frog_type": p[3], "max_capacity": p[4], "current_count": p[5]
            } for p in ponds}

            grouped = group_ponds_by_type(pond_id_to_info)

            # ÈªòËÆ§ÂÄº
            from_pond_id   = None
            to_pond_id     = None
            purchase_price = None

            # ‚ë† Â§ñË¥≠ ----------------------------------------------------------
            if operation == "Â§ñË¥≠":
                to_pond_id = pond_selector("ÁõÆÊ†áÊ±†Â°ò", pond_id_to_info, grouped, "purchase")
                purchase_price = st.number_input(
                    "Â§ñË¥≠Âçï‰ª∑ (ÂÖÉ/Âè™)",
                    min_value=0.1, value=20.0, step=1.0, format="%.2f",
                    help="ËØ∑ËæìÂÖ•ÊØèÂè™ËõôÁöÑÈááË¥≠‰ª∑Ê†º"
                )

            # ‚ë° Â≠µÂåñ ----------------------------------------------------------
            elif operation == "Â≠µÂåñ":
                hatch_grouped = {k: v for k, v in grouped.items() if k == "Â≠µÂåñÊ±†"}
                if not hatch_grouped:
                    st.error("‚ùå ËØ∑ÂÖàËá≥Â∞ëÂàõÂª∫‰∏Ä‰∏™‚ÄòÂ≠µÂåñÊ±†‚Äô")
                else:
                    to_pond_id = pond_selector("Â≠µÂåñÊ±†", pond_id_to_info, hatch_grouped, "hatch")
                    purchase_price = None  # Â≠µÂåñÊó†ÊàêÊú¨

            # ‚ë¢ ËΩ¨Ê±† ----------------------------------------------------------
            else:  # operation == "ËΩ¨Ê±†"
                src_grouped = {k: v for k, v in grouped.items() if k in TRANSFER_PATH_RULES}
                if not src_grouped:
                    st.error("‚ùå Êó†ÂèØÁî®ÁöÑËΩ¨Âá∫Ê±†Á±ªÂûã")
                else:
                    from_pond_id = pond_selector("Ê∫êÊ±†Â°òÔºàËΩ¨Âá∫Ôºâ", pond_id_to_info, src_grouped, "transfer_src")

                    live_info = pond_id_to_info[from_pond_id]
                    allowed = TRANSFER_PATH_RULES.get(live_info["pond_type"], [])
                    tgt_grouped = {k: v for k, v in grouped.items() if k in allowed and v}
                    if not tgt_grouped:
                        st.error("‚ùå Êó†ÂêàÊ≥ïÁõÆÊ†áÊ±†")
                    else:
                        to_pond_id = pond_selector("ÁõÆÊ†áÊ±†Â°òÔºàËΩ¨ÂÖ•Ôºâ", pond_id_to_info, tgt_grouped, "transfer_tgt")
                        purchase_price = None

            # ÂÖ¨ÂÖ±ËæìÂÖ•ÔºàÂè™Âú®ÊúâÁõÆÊ†áÊ±†Êó∂ÊâçÊòæÁ§∫Ôºâ
            if to_pond_id is not None:
                quantity = st.number_input("Êï∞Èáè", min_value=1, value=1000, step=50)
                            # ---- Âø´Êç∑ÊèèËø∞ ----
                quick_desc = st.selectbox("Âø´Êç∑ÊèèËø∞", COMMON_REMARKS["Êìç‰ΩúÊèèËø∞"], key="quick_desc")
                description = st.text_input("Êìç‰ΩúÊèèËø∞", value=quick_desc, placeholder="Â¶ÇÔºö‰∫ßÂçµËΩ¨Âá∫ / Â§ñË¥≠ÂπºËõô / Ëá™Â≠µËùåËö™")

                if st.button(f"‚úÖ ÊâßË°å{operation}", type="primary"):
                    try:
                        to_pond = get_pond_by_id(to_pond_id)
                        if to_pond[4] + quantity > to_pond[3]:
                            st.error(f"‚ùå ÁõÆÊ†áÊ±†„Äå{to_pond[1]}„ÄçÂÆπÈáè‰∏çË∂≥ÔºÅÂΩìÂâç {to_pond[4]}/{to_pond[3]}ÔºåÊó†Ê≥ïÂÆπÁ∫≥ {quantity} Âè™„ÄÇ")
                        elif operation == "ËΩ¨Ê±†" and from_pond_id is not None:
                            from_pond = get_pond_by_id(from_pond_id)
                            if from_pond[4] < quantity:
                                st.error(f"‚ùå Ê∫êÊ±†„Äå{from_pond[1]}„ÄçÊï∞Èáè‰∏çË∂≥ÔºÅÂΩìÂâçÂè™Êúâ {from_pond[4]} Âè™„ÄÇ")
                            else:
                                movement_type = 'transfer'
                                add_stock_movement(
                                    movement_type=movement_type,
                                    from_pond_id=from_pond_id,
                                    to_pond_id=to_pond_id,
                                    quantity=quantity,
                                    description=description or f"{operation} {quantity} Âè™",
                                    unit_price=purchase_price
                                )
                                st.success(f"‚úÖ {operation}ÊàêÂäüÔºÅ")
                                st.rerun()
                        else:
                            movement_type = {'Â§ñË¥≠':'purchase', 'Â≠µÂåñ':'hatch'}[operation]
                            add_stock_movement(
                                movement_type=movement_type,
                                from_pond_id=None,
                                to_pond_id=to_pond_id,
                                quantity=quantity,
                                description=description or f"{operation} {quantity} Âè™",
                                unit_price=purchase_price
                            )
                            st.success(f"‚úÖ {operation}ÊàêÂäüÔºÅ")
                            st.rerun()

                    except Exception as e:
                        st.error(f"‚ùå Êìç‰ΩúÂ§±Ë¥•: {e}")

                # ÊúÄËøëËÆ∞ÂΩï
                st.markdown("---")
                st.subheader("üìã ÊúÄËøëËΩ¨Ê±† / Â§ñË¥≠ / Â≠µÂåñËÆ∞ÂΩï")
                records = get_recent_movements(15)
                if not records:
                    st.info("ÊöÇÊó†Êìç‰ΩúËÆ∞ÂΩï")
                else:
                    import pandas as pd
                    df_log = pd.DataFrame(records, columns=["ID", "Á±ªÂûã", "Ê∫êÊ±†", "ÁõÆÊ†áÊ±†", "Êï∞Èáè", "ÊèèËø∞", "Êó∂Èó¥"])
                    st.dataframe(df_log, use_container_width=True, hide_index=True)
                    csv = df_log.to_csv(index=False)
                    st.download_button(
                        label="üì• ÂØºÂá∫ CSV",
                        data=csv,
                        file_name=f"movement_log_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                        mime="text/csv"
                    )
                    if st.button("üîÑ Âà∑Êñ∞ÂàóË°®"):
                        st.rerun()
                        # ----------------------------- Tab 5: È•≤ÊñôÁ±ªÂûã ---------------------------
    with tab5:
        st.subheader("ü™± È•≤ÊñôÁ±ªÂûãÁÆ°ÁêÜ")
        conn = get_db_connection()
        cur = conn.cursor()

        # 1. Â∑≤ÊúâÂàóË°®
        cur.execute("SELECT id, name, unit_price FROM feed_type_shiwa ORDER BY id;")
        feed_rows = cur.fetchall()
        if feed_rows:
            df_feed = pd.DataFrame(feed_rows, columns=["ID", "ÂêçÁß∞", "Âçï‰ª∑(¬•/kg)"])
            st.dataframe(df_feed, use_container_width=True, hide_index=True)
        else:
            st.info("ÊöÇÊó†È•≤ÊñôÁ±ªÂûãÔºåËØ∑Ê∑ªÂä†„ÄÇ")

        # 2. Êñ∞Â¢û/‰øÆÊîπ
        with st.form("feed_form", clear_on_submit=True):
            c1, c2 = st.columns(2)
            with c1:
                name = st.text_input("È•≤ÊñôÂêçÁß∞", placeholder="Â¶ÇÔºöÁ∫¢Ëô´")
            with c2:
                price = st.number_input("Âçï‰ª∑ (¬•/kg)", min_value=0.0, step=1.0, value=20.0)
            submitted = st.form_submit_button("‚úÖ Ê∑ªÂä†/Êõ¥Êñ∞")
            if submitted:
                # Ëã•ÂêåÂêçÂàô ON CONFLICT Êõ¥Êñ∞Âçï‰ª∑
                cur.execute("""
                    INSERT INTO feed_type_shiwa (name, unit_price)
                    VALUES (%s, %s)
                    ON CONFLICT (name)
                    DO UPDATE SET unit_price = EXCLUDED.unit_price;
                """, (name, price))
                conn.commit()
                st.success(f"‚úÖ È•≤Êñô„Äå{name}„ÄçÂ∑≤‰øùÂ≠òÔºÅ")
                st.rerun()

        # 3. Âà†Èô§
        if feed_rows:
            with st.form("del_feed"):
                to_del = st.selectbox("Âà†Èô§È•≤Êñô",
                                    options=[r[0] for r in feed_rows],
                                    format_func=lambda x:
                                    next(r[1] for r in feed_rows if r[0] == x))
                if st.form_submit_button("üóëÔ∏è Âà†Èô§", type="secondary"):
                    cur.execute("DELETE FROM feed_type_shiwa WHERE id = %s;", (to_del,))
                    conn.commit()
                    st.success("Â∑≤Âà†Èô§ÔºÅ")
                    st.rerun()
        cur.close()
        conn.close()
        # ----------------------------- Tab 6: ÈîÄÂîÆËÆ∞ÂΩï ---------------------------
    # ----------------------------- Tab 6: ÈîÄÂîÆËÆ∞ÂΩï ---------------------------
    with tab6:
        st.subheader("üí∞ ÈîÄÂîÆËÆ∞ÂΩï")
        ponds = get_all_ponds()
        if not ponds:
            st.warning("ÊöÇÊó†ÂèØÈîÄÂîÆÊ±†Â°ò")
            st.stop()

        # ---- ÂèØÂîÆÊ±†ËøáÊª§ ----
        sale_src = ["ÂÖªÊÆñÊ±†", "ÂïÜÂìÅËõôÊ±†", "‰∏âÂπ¥ËõôÊ±†", "ÂõõÂπ¥ËõôÊ±†", "‰∫îÂπ¥ËõôÊ±†", "ÂÖ≠Âπ¥ËõôÊ±†", "ÁßçËõôÊ±†"]
        cand = [p for p in ponds if p[2] in sale_src and p[5] > 0]
        if not cand:
            st.info("Ê≤°ÊúâÂèØÈîÄÂîÆÁöÑËõô")
            st.stop()

        # ========================
        # ‚úÖ Êñ∞Â¢ûÔºöÂø´ÈÄüÈÄâÊã©ÂèØÈîÄÂîÆÊ±†Â°òÔºàÊîæÂú®ÂÆ¢Êà∑ÈÄâÊã©‰πãÂâçÔºâ
        # ========================
        st.markdown("#### üîç Âø´ÈÄüÈÄâÊã©ÂèØÈîÄÂîÆÊ±†Â°ò")
        
        # ÊûÑÂª∫ÈÄâÈ°πÂàóË°®
        pond_options = []
        pond_id_map = {}
        for p in cand:
            pid, name, pond_type, frog_type, max_cap, current = p
            label = f"[{frog_type}] {name}Ôºà{pond_type}ÔΩúÁé∞Â≠ò {current} Âè™Ôºâ"
            pond_options.append(label)
            pond_id_map[label] = pid

        # ‰ΩøÁî® session_state ËÆ∞‰ΩèÈÄâÊã©
        if "selected_sale_pond_label" not in st.session_state:
            st.session_state.selected_sale_pond_label = pond_options[0] if pond_options else None

        selected_label = st.selectbox(
            "ÈÄâÊã©Ê±†Â°òÂø´ÈÄüÈ¢ÑËßà",
            options=pond_options,
            index=pond_options.index(st.session_state.selected_sale_pond_label) if st.session_state.selected_sale_pond_label in pond_options else 0,
            key="quick_pond_selector"
        )
        st.session_state.selected_sale_pond_label = selected_label

        # ÊòæÁ§∫ÊâÄÈÄâÊ±†Â°òËØ¶ÊÉÖÔºàÂèØÈÄâÔºâ
        if selected_label:
            pid = pond_id_map[selected_label]
            info = next(p for p in cand if p[0] == pid)
            st.info(f"Â∑≤ÈÄâÔºö{info[1]}ÔΩúÁ±ªÂûãÔºö{info[2]}ÔΩúËõôÁßçÔºö{info[3]}ÔΩúÂΩìÂâçÂ∫ìÂ≠òÔºö{info[5]} Âè™")

        st.markdown("---")

        # ---- ÂÆ¢Êà∑Âå∫ ----
        st.markdown("#### 1. ÈÄâÊã©ÂÆ¢Êà∑")
        customers = get_customers() or []
        c1, c2 = st.columns([3, 1])
        with c1:
            cust_opt = ["Êñ∞Âª∫ÂÆ¢Êà∑"] + [f"{c[1]} ({c[3]})" for c in customers]
            cust_sel = st.selectbox("ÂÆ¢Êà∑", cust_opt, key="sale_customer")
        new_cust = cust_sel == "Êñ∞Âª∫ÂÆ¢Êà∑"
        with c2:
            sale_type = st.radio("ÈîÄÂîÆÁ±ªÂûã", ["Èõ∂ÂîÆ", "ÊâπÂèë"], horizontal=True, key="sale_type")

        customer_id = None

        if new_cust:
            with st.form("new_customer"):
                name = st.text_input("ÂÆ¢Êà∑ÂßìÂêç")
                phone = st.text_input("ÁîµËØù", max_chars=20)
                if st.form_submit_button("Ê∑ªÂä†ÂÆ¢Êà∑"):
                    if not name.strip():
                        st.error("ËØ∑ËæìÂÖ•ÂßìÂêç")
                        # ‚úÖ ‰∏çÁî® st.stop()ÔºåË°®ÂçïÊèê‰∫§Â§±Ë¥•Â∞±ÂÅúÂú®ËøôÈáå
                    else:
                        customer_id = add_customer(name.strip(), phone, sale_type)
                        st.success(f"‚úÖ ÂÆ¢Êà∑ {name} Â∑≤ÂàõÂª∫")
                        st.rerun()  # ÈáçÊñ∞Âä†ËΩΩ‰ª•ÊòæÁ§∫Êñ∞ÂÆ¢Êà∑
        else:
            if customers:
                customer_id = customers[cust_opt.index(cust_sel) - 1][0]
            # else: customer_id ‰øùÊåÅ None

        # ‚úÖ Áªü‰∏ÄÂà§Êñ≠ÔºöÊòØÂê¶ÊúâÊúâÊïàÂÆ¢Êà∑ ID
        if customer_id is None:
            st.info("ËØ∑ÈÄâÊã©Áé∞ÊúâÂÆ¢Êà∑ÊàñÂàõÂª∫Êñ∞ÂÆ¢Êà∑‰ª•ÁªßÁª≠")
            # ‰∏çÊ∏≤ÊüìÈîÄÂîÆË°®ÂçïÂíåÂÆ¢Êà∑‰ø°ÊÅØ
        else:
            # --- ÊòæÁ§∫ÂÆ¢Êà∑‰ø°ÊÅØÔºàÁÆÄÊ¥ÅÁâàÔºâ---
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("SELECT name, phone, type FROM customer_shiwa WHERE id = %s;", (customer_id,))
            cust_detail = cur.fetchone()
            cur.close()
            conn.close()
            
            if cust_detail:
                name, phone, ctype = cust_detail
                phone_str = f"ÔΩúÁîµËØùÔºö{phone}" if phone else ""
                st.info(f"Â∑≤ÈÄâÂÆ¢Êà∑Ôºö{name}Ôºà{ctype}Ôºâ{phone_str}")
            
            # --- ÈîÄÂîÆË°®ÂçïÂ∞ÜÂú®ÂêéÈù¢Ê∏≤Êüì ---

        # ‚úÖ Êñ∞Â¢ûÔºöÁÆÄÊ¥ÅÊòæÁ§∫ÂÆ¢Êà∑‰ø°ÊÅØÔºà‰ªøÁÖßÊ±†Â°òÂø´ÈÄüÈ¢ÑËßàÔºâ
        # Ëé∑ÂèñÂÆ¢Êà∑ËØ¶ÊÉÖ
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("SELECT name, phone, type FROM customer_shiwa WHERE id = %s;", (customer_id,))
        cust_detail = cur.fetchone()
        cur.close()
        conn.close()

        if cust_detail:
            name, phone, ctype = cust_detail
            phone_str = f"ÔΩúÁîµËØùÔºö{phone}" if phone else ""
            st.info(f"Â∑≤ÈÄâÂÆ¢Êà∑Ôºö{name}Ôºà{ctype}Ôºâ{phone_str}")

        # ---- ÈîÄÂîÆË°®Âçï ----
        st.markdown("#### 2. ÈîÄÂîÆÊòéÁªÜ")
        with st.form("sale_form"):
            # ÂÆâÂÖ® format_func
            def pond_label(pid):
                for c in cand:
                    if c[0] == pid:
                        return f"{c[1]}  ({c[2]}-{c[3]}  Áé∞Â≠ò{c[5]})"
                return "Êú™Áü•Ê±†"

            # ‚úÖ Ëá™Âä®È¢ÑÈÄâÁî®Êà∑Âú®‰∏äÊñπÈÄâÊã©ÁöÑÊ±†Â°ò
            pre_selected_pid = pond_id_map.get(st.session_state.selected_sale_pond_label)
            default_index = 0
            if pre_selected_pid and pre_selected_pid in [c[0] for c in cand]:
                try:
                    default_index = [c[0] for c in cand].index(pre_selected_pid)
                except ValueError:
                    default_index = 0

            pond_id = st.selectbox(
                "ÈÄâÊã©Ê±†Â°ò",
                options=[c[0] for c in cand],
                format_func=pond_label,
                index=default_index,
                key="sale_pond"
            )
            pond_info = next(c for c in cand if c[0] == pond_id)
            max_q = pond_info[5]
            qty = st.number_input("ÈîÄÂîÆÊï∞Èáè", min_value=1, max_value=max_q, step=1)
            default_price = 60.0 if sale_type == "Èõ∂ÂîÆ" else 45.0
            price = st.number_input("Âçï‰ª∑ (ÂÖÉ/Âè™)", min_value=0.1, value=default_price, step=5.0)
            note = st.text_area("Â§áÊ≥®")
            if st.form_submit_button("‚úÖ Á°ÆËÆ§ÈîÄÂîÆ", type="primary"):
                do_sale(pond_id, customer_id, sale_type, qty, price, note)
                st.success(f"‚úÖ ÈîÄÂîÆÊàêÂäüÔºö{qty} Âè™ √ó {price} = {qty*price:.2f} ÂÖÉ")
                st.rerun()

        # ---- ÊúÄËøëÈîÄÂîÆ ----
        st.markdown("#### 3. ÊúÄËøëÈîÄÂîÆËÆ∞ÂΩï")
        recent_sales = get_recent_sales(15)
        if recent_sales:
            df = pd.DataFrame(
                recent_sales,
                columns=["ID", "Ê±†Â°ò", "ÂÆ¢Êà∑", "Á±ªÂûã", "Êï∞Èáè", "Âçï‰ª∑", "ÊÄªÈáëÈ¢ù", "Êó∂Èó¥", "Â§áÊ≥®"]
            )
            st.dataframe(df, use_container_width=True, hide_index=True)
            csv = df.to_csv(index=False)
            st.download_button("üì• ÂØºÂá∫ CSV", csv, file_name=f"sale_{pd.Timestamp.now():%Y%m%d_%H%M%S}.csv")
        else:
            st.info("ÊöÇÊó†ÈîÄÂîÆËÆ∞ÂΩï")
    # ----------------------------- Tab 7: ÊäïËµÑÂõûÊä• ROI -----------------------------
    with tab7:
        st.subheader("üìà ËõôÁßçÊäïËµÑÂõûÊä•ÁéáÔºàROIÔºâÂàÜÊûê")
        st.caption("ROI = (ÈîÄÂîÆÊî∂ÂÖ• - ÊÄªÊàêÊú¨) / ÊÄªÊàêÊú¨ √ó 100% | Â§ñË¥≠ÊàêÊú¨Êåâ 20 ÂÖÉ/Âè™‰º∞ÁÆóÔºàËã•Êú™Â°´Âçï‰ª∑Ôºâ")

        # ========== Ê±áÊÄªËßÜÂõæ ==========
        roi_data = get_roi_data()
        if roi_data:
            import pandas as pd
            df_roi = pd.DataFrame(roi_data)
            st.dataframe(
                df_roi.style.format({
                    "ÂñÇÂÖªÊàêÊú¨ (¬•)": "¬•{:.2f}",
                    "Â§ñË¥≠ÊàêÊú¨ (¬•)": "¬•{:.2f}",
                    "ÊÄªÊàêÊú¨ (¬•)": "¬•{:.2f}",
                    "ÈîÄÂîÆÊî∂ÂÖ• (¬•)": "¬•{:.2f}",
                    "ÂáÄÂà©Ê∂¶ (¬•)": "¬•{:.2f}",
                    "ROI (%)": "{:.2f}%"
                }),
                use_container_width=True,
                hide_index=True
            )

            # ROI Êü±Áä∂Âõæ
            st.markdown("### üìä ROI ÂØπÊØî")
            chart_df = df_roi.set_index("ËõôÁßç")["ROI (%)"]
            st.bar_chart(chart_df, height=300)

            # ÂØºÂá∫ÊåâÈíÆ
            csv = df_roi.to_csv(index=False)
            st.download_button(
                "üì• ÂØºÂá∫Ê±áÊÄªÊä•Âëä (CSV)",
                csv,
                file_name=f"shiwa_roi_summary_{pd.Timestamp.now().strftime('%Y%m%d')}.csv"
            )
        else:
            st.info("ÊöÇÊó† ROI Êï∞ÊçÆ")

        st.markdown("---")
        st.subheader("üîç ROI ÊòéÁªÜÔºöÊåâÊ±†Â°òÊü•ÁúãÊàêÊú¨‰∏éÊî∂ÂÖ•")

        # ========== ÊòéÁªÜËßÜÂõæ ==========
        feedings, purchases, sales = get_pond_roi_details()
        
        if not (feedings or purchases or sales):
            st.info("ÊöÇÊó†ÂñÇÂÖª„ÄÅÂ§ñË¥≠ÊàñÈîÄÂîÆÊòéÁªÜËÆ∞ÂΩï")
        else:
            # ÊåâÊ±†Â°òÂàÜÁªÑ
            from collections import defaultdict
            pond_details = defaultdict(lambda: {"feedings": [], "purchases": [], "sales": []})

            # ÂñÇÂÖª
            for row in feedings:
                pond_name = row[0]
                pond_details[pond_name]["feedings"].append({
                    "feed_type": row[3],
                    "weight_kg": row[2],
                    "unit_price": row[4],
                    "total_cost": row[5],
                    "time": row[6]
                })

            # Â§ñË¥≠
            for row in purchases:
                pond_name = row[0]
                pond_details[pond_name]["purchases"].append({
                    "quantity": row[2],
                    "unit_price": row[3] or 20.0,
                    "total_cost": row[4],
                    "time": row[5]
                })

            # ÈîÄÂîÆ
            for row in sales:
                pond_name = row[0]
                pond_details[pond_name]["sales"].append({
                    "quantity": row[2],
                    "unit_price": row[3],
                    "total_amount": row[4],
                    "customer": row[6],
                    "time": row[5]
                })

            # ÊòæÁ§∫ÊØè‰∏™Ê±†Â°ò
            for pond_name, details in pond_details.items():
                with st.expander(f"üìç {pond_name}", expanded=False):
                    frog_type = None
                    if details["feedings"]:
                        frog_type = next(iter(details["feedings"]))  # Êó†Ê≥ïÁõ¥Êé•ÂèñÔºåÊîπÁî®ÂÖ∂‰ªñÊñπÂºè
                    # ÂÆûÈôÖ‰∏äÊàë‰ª¨ÂèØ‰ª•Âú®Êü•ËØ¢Êó∂Â∏¶‰∏ä frog_typeÔºå‰ΩÜ‰∏∫ÁÆÄÂåñÔºåÊ≠§Â§ÑÁï•Ëøá

                    # ÂñÇÂÖªËÆ∞ÂΩï
                    if details["feedings"]:
                        st.markdown("**üçΩÔ∏è ÂñÇÂÖªËÆ∞ÂΩï**")
                        for f in details["feedings"]:
                            st.caption(f"- {f['feed_type']} {f['weight_kg']}kg √ó ¬•{f['unit_price']}/kg = **¬•{f['total_cost']:.2f}** ({f['time'].strftime('%Y-%m-%d')})")

                    # Â§ñË¥≠ËÆ∞ÂΩï
                    if details["purchases"]:
                        st.markdown("**üì¶ Â§ñË¥≠ËÆ∞ÂΩï**")
                        for p in details["purchases"]:
                            st.caption(f"- Â§ñË¥≠ {p['quantity']} Âè™ √ó ¬•{p['unit_price']}/Âè™ = **¬•{p['total_cost']:.2f}** ({p['time'].strftime('%Y-%m-%d')})")

                    # ÈîÄÂîÆËÆ∞ÂΩï
                    if details["sales"]:
                        st.markdown("**üí∞ ÈîÄÂîÆËÆ∞ÂΩï**")
                        for s in details["sales"]:
                            st.caption(f"- ÈîÄÂîÆ {s['quantity']} Âè™ √ó ¬•{s['unit_price']}/Âè™ = **¬•{s['total_amount']:.2f}** ÔºàÂÆ¢Êà∑Ôºö{s['customer']}Ôºå{s['time'].strftime('%Y-%m-%d')})")

                    # Â∞èËÆ°ÔºàÂèØÈÄâÔºâ
                    total_feed = sum(f["total_cost"] for f in details["feedings"])
                    total_purchase = sum(p["total_cost"] for p in details["purchases"])
                    total_sales_amt = sum(s["total_amount"] for s in details["sales"])
                    net = total_sales_amt - total_feed - total_purchase
